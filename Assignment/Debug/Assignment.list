
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ba8  08002ba8  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002ba8  08002ba8  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ba8  08002ba8  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ba8  08002ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000048  08002bf8  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002bf8  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ab6  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2a  00000000  00000000  00029b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002b858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017541  00000000  00000000  0002cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d49d  00000000  00000000  00044249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084564  00000000  00000000  000516e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5c4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a30  00000000  00000000  000d5ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b70 	.word	0x08002b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002b70 	.word	0x08002b70

0800014c <auto_fsm_run>:
 *  Created on: Nov 30, 2022
 *      Author: 84336
 */
#include "auto_fsm.h"

void auto_fsm_run() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b5c      	ldr	r3, [pc, #368]	; (80002c4 <auto_fsm_run+0x178>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 80b1 	bhi.w	80002be <auto_fsm_run+0x172>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <auto_fsm_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	08000189 	.word	0x08000189
 800016c:	080001d5 	.word	0x080001d5
 8000170:	08000221 	.word	0x08000221
 8000174:	0800026d 	.word	0x0800026d

	case INIT:
		status = RED1_GREEN2;
 8000178:	4b52      	ldr	r3, [pc, #328]	; (80002c4 <auto_fsm_run+0x178>)
 800017a:	2202      	movs	r2, #2
 800017c:	601a      	str	r2, [r3, #0]
		SetTimer1(3000);
 800017e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000182:	f000 fc53 	bl	8000a2c <SetTimer1>
		break;
 8000186:	e09a      	b.n	80002be <auto_fsm_run+0x172>

	case RED1_GREEN2:
		RED_1();
 8000188:	f000 fdca 	bl	8000d20 <RED_1>
		GREEN_2();
 800018c:	f000 fe24 	bl	8000dd8 <GREEN_2>
		GREEN_3();
 8000190:	f000 fc38 	bl	8000a04 <GREEN_3>

		if (timer1_flag == 1) {
 8000194:	4b4c      	ldr	r3, [pc, #304]	; (80002c8 <auto_fsm_run+0x17c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	2b01      	cmp	r3, #1
 800019a:	d106      	bne.n	80001aa <auto_fsm_run+0x5e>
			status = RED1_YELLOW2;
 800019c:	4b49      	ldr	r3, [pc, #292]	; (80002c4 <auto_fsm_run+0x178>)
 800019e:	2203      	movs	r2, #3
 80001a0:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 80001a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001a6:	f000 fc41 	bl	8000a2c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 80001aa:	f000 f8b3 	bl	8000314 <Button1_Is_Pressed>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d106      	bne.n	80001c2 <auto_fsm_run+0x76>
			status = MAN_GREEN1_RED2;
 80001b4:	4b43      	ldr	r3, [pc, #268]	; (80002c4 <auto_fsm_run+0x178>)
 80001b6:	220e      	movs	r2, #14
 80001b8:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 80001ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001be:	f000 fc35 	bl	8000a2c <SetTimer1>
		}
		if (Button3_Is_Pressed() == 1) {
 80001c2:	f000 f8b9 	bl	8000338 <Button3_Is_Pressed>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d171      	bne.n	80002b0 <auto_fsm_run+0x164>
			status = RED1_GREEN2;
 80001cc:	4b3d      	ldr	r3, [pc, #244]	; (80002c4 <auto_fsm_run+0x178>)
 80001ce:	2202      	movs	r2, #2
 80001d0:	601a      	str	r2, [r3, #0]
		}
		break;
 80001d2:	e06d      	b.n	80002b0 <auto_fsm_run+0x164>

	case RED1_YELLOW2:
		RED_1();
 80001d4:	f000 fda4 	bl	8000d20 <RED_1>
		YELLOW_2();
 80001d8:	f000 fdee 	bl	8000db8 <YELLOW_2>
		GREEN_3();
 80001dc:	f000 fc12 	bl	8000a04 <GREEN_3>

		if (timer1_flag == 1) {
 80001e0:	4b39      	ldr	r3, [pc, #228]	; (80002c8 <auto_fsm_run+0x17c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d106      	bne.n	80001f6 <auto_fsm_run+0xaa>
			status = GREEN1_RED2;
 80001e8:	4b36      	ldr	r3, [pc, #216]	; (80002c4 <auto_fsm_run+0x178>)
 80001ea:	2204      	movs	r2, #4
 80001ec:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 80001ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001f2:	f000 fc1b 	bl	8000a2c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 80001f6:	f000 f88d 	bl	8000314 <Button1_Is_Pressed>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d106      	bne.n	800020e <auto_fsm_run+0xc2>
			status = MAN_GREEN1_RED2;
 8000200:	4b30      	ldr	r3, [pc, #192]	; (80002c4 <auto_fsm_run+0x178>)
 8000202:	220e      	movs	r2, #14
 8000204:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000206:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800020a:	f000 fc0f 	bl	8000a2c <SetTimer1>
		}
		if (Button3_Is_Pressed() == 1) {
 800020e:	f000 f893 	bl	8000338 <Button3_Is_Pressed>
 8000212:	4603      	mov	r3, r0
 8000214:	2b01      	cmp	r3, #1
 8000216:	d14d      	bne.n	80002b4 <auto_fsm_run+0x168>
			status = RED1_YELLOW2;
 8000218:	4b2a      	ldr	r3, [pc, #168]	; (80002c4 <auto_fsm_run+0x178>)
 800021a:	2203      	movs	r2, #3
 800021c:	601a      	str	r2, [r3, #0]
		}
		break;
 800021e:	e049      	b.n	80002b4 <auto_fsm_run+0x168>

	case GREEN1_RED2:
		GREEN_1();
 8000220:	f000 fda6 	bl	8000d70 <GREEN_1>
		RED_2();
 8000224:	f000 fdb8 	bl	8000d98 <RED_2>
		RED_3();
 8000228:	f000 fbd8 	bl	80009dc <RED_3>

		if (timer1_flag == 1) {
 800022c:	4b26      	ldr	r3, [pc, #152]	; (80002c8 <auto_fsm_run+0x17c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d106      	bne.n	8000242 <auto_fsm_run+0xf6>
			status = YELLOW1_RED2;
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <auto_fsm_run+0x178>)
 8000236:	2205      	movs	r2, #5
 8000238:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 800023a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800023e:	f000 fbf5 	bl	8000a2c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8000242:	f000 f867 	bl	8000314 <Button1_Is_Pressed>
 8000246:	4603      	mov	r3, r0
 8000248:	2b01      	cmp	r3, #1
 800024a:	d106      	bne.n	800025a <auto_fsm_run+0x10e>
			status = RED1_GREEN2;
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <auto_fsm_run+0x178>)
 800024e:	2202      	movs	r2, #2
 8000250:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000252:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000256:	f000 fbe9 	bl	8000a2c <SetTimer1>
		}
		if (Button3_Is_Pressed() == 1) {
 800025a:	f000 f86d 	bl	8000338 <Button3_Is_Pressed>
 800025e:	4603      	mov	r3, r0
 8000260:	2b01      	cmp	r3, #1
 8000262:	d129      	bne.n	80002b8 <auto_fsm_run+0x16c>
			status = GREEN1_RED2;
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <auto_fsm_run+0x178>)
 8000266:	2204      	movs	r2, #4
 8000268:	601a      	str	r2, [r3, #0]
		}
		break;
 800026a:	e025      	b.n	80002b8 <auto_fsm_run+0x16c>

	case YELLOW1_RED2:
		YELLOW_1();
 800026c:	f000 fd6c 	bl	8000d48 <YELLOW_1>
		RED_2();
 8000270:	f000 fd92 	bl	8000d98 <RED_2>
		RED_3();
 8000274:	f000 fbb2 	bl	80009dc <RED_3>

		if (timer1_flag == 1) {
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <auto_fsm_run+0x17c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d106      	bne.n	800028e <auto_fsm_run+0x142>
			status = RED1_GREEN2;
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <auto_fsm_run+0x178>)
 8000282:	2202      	movs	r2, #2
 8000284:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000286:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800028a:	f000 fbcf 	bl	8000a2c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 800028e:	f000 f841 	bl	8000314 <Button1_Is_Pressed>
 8000292:	4603      	mov	r3, r0
 8000294:	2b01      	cmp	r3, #1
 8000296:	d102      	bne.n	800029e <auto_fsm_run+0x152>
			status = MAN_RED1_GREEN2;
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <auto_fsm_run+0x178>)
 800029a:	220c      	movs	r2, #12
 800029c:	601a      	str	r2, [r3, #0]
		}
		if (Button3_Is_Pressed() == 1) {
 800029e:	f000 f84b 	bl	8000338 <Button3_Is_Pressed>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d109      	bne.n	80002bc <auto_fsm_run+0x170>
			status = YELLOW1_RED2;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <auto_fsm_run+0x178>)
 80002aa:	2205      	movs	r2, #5
 80002ac:	601a      	str	r2, [r3, #0]
		}
		break;
 80002ae:	e005      	b.n	80002bc <auto_fsm_run+0x170>
		break;
 80002b0:	bf00      	nop
 80002b2:	e004      	b.n	80002be <auto_fsm_run+0x172>
		break;
 80002b4:	bf00      	nop
 80002b6:	e002      	b.n	80002be <auto_fsm_run+0x172>
		break;
 80002b8:	bf00      	nop
 80002ba:	e000      	b.n	80002be <auto_fsm_run+0x172>
		break;
 80002bc:	bf00      	nop
	}
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000070 	.word	0x20000070
 80002c8:	20000074 	.word	0x20000074

080002cc <SubKeyProcess1>:
int KeyReg9 = NORMAL_STATE;
int KeyReg10 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;
int TimerForKeyPress3 = 100;

void SubKeyProcess1() {
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <SubKeyProcess1+0x14>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000064 	.word	0x20000064

080002e4 <SubKeyProcess2>:

void SubKeyProcess2() {
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <SubKeyProcess2+0x14>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	20000068 	.word	0x20000068

080002fc <SubKeyProcess3>:

void SubKeyProcess3() {
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <SubKeyProcess3+0x14>)
 8000302:	2201      	movs	r2, #1
 8000304:	601a      	str	r2, [r3, #0]
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	2000006c 	.word	0x2000006c

08000314 <Button1_Is_Pressed>:

int Button1_Is_Pressed () {
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <Button1_Is_Pressed+0x20>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d104      	bne.n	800032a <Button1_Is_Pressed+0x16>
		button1_flag = 0;
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <Button1_Is_Pressed+0x20>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
		return 1;
 8000326:	2301      	movs	r3, #1
 8000328:	e000      	b.n	800032c <Button1_Is_Pressed+0x18>
	}
	return 0;
 800032a:	2300      	movs	r3, #0
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	20000064 	.word	0x20000064

08000338 <Button3_Is_Pressed>:
		return 1;
	}
	return 0;
}

int Button3_Is_Pressed () {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <Button3_Is_Pressed+0x20>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d104      	bne.n	800034e <Button3_Is_Pressed+0x16>
		button3_flag = 0;
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <Button3_Is_Pressed+0x20>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
		return 1;
 800034a:	2301      	movs	r3, #1
 800034c:	e000      	b.n	8000350 <Button3_Is_Pressed+0x18>
	}
	return 0;
 800034e:	2300      	movs	r3, #0
}
 8000350:	4618      	mov	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	2000006c 	.word	0x2000006c

0800035c <GetKeyInput1>:

void GetKeyInput1() {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <GetKeyInput1+0x80>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a1e      	ldr	r2, [pc, #120]	; (80003e0 <GetKeyInput1+0x84>)
 8000366:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <GetKeyInput1+0x88>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a1b      	ldr	r2, [pc, #108]	; (80003dc <GetKeyInput1+0x80>)
 800036e:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000370:	2102      	movs	r1, #2
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <GetKeyInput1+0x8c>)
 8000374:	f001 f85a 	bl	800142c <HAL_GPIO_ReadPin>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <GetKeyInput1+0x88>)
 800037e:	601a      	str	r2, [r3, #0]
	if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)) {
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <GetKeyInput1+0x84>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <GetKeyInput1+0x80>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	429a      	cmp	r2, r3
 800038a:	d125      	bne.n	80003d8 <GetKeyInput1+0x7c>
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <GetKeyInput1+0x80>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <GetKeyInput1+0x88>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	429a      	cmp	r2, r3
 8000396:	d11f      	bne.n	80003d8 <GetKeyInput1+0x7c>
		if (KeyReg3 != KeyReg2) {
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <GetKeyInput1+0x90>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <GetKeyInput1+0x88>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d00d      	beq.n	80003c0 <GetKeyInput1+0x64>
			KeyReg3 = KeyReg2;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <GetKeyInput1+0x88>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a10      	ldr	r2, [pc, #64]	; (80003ec <GetKeyInput1+0x90>)
 80003aa:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == PRESSED_STATE) {
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <GetKeyInput1+0x88>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d111      	bne.n	80003d8 <GetKeyInput1+0x7c>
				SubKeyProcess1();
 80003b4:	f7ff ff8a 	bl	80002cc <SubKeyProcess1>
				TimerForKeyPress1 = 100;
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <GetKeyInput1+0x94>)
 80003ba:	2264      	movs	r2, #100	; 0x64
 80003bc:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress1 == 0) {
				KeyReg3 = NORMAL_STATE;
			}
		}
	}
}
 80003be:	e00b      	b.n	80003d8 <GetKeyInput1+0x7c>
			TimerForKeyPress1--;
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <GetKeyInput1+0x94>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	3b01      	subs	r3, #1
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <GetKeyInput1+0x94>)
 80003c8:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1 == 0) {
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <GetKeyInput1+0x94>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d102      	bne.n	80003d8 <GetKeyInput1+0x7c>
				KeyReg3 = NORMAL_STATE;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <GetKeyInput1+0x90>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	601a      	str	r2, [r3, #0]
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000004 	.word	0x20000004
 80003e0:	20000000 	.word	0x20000000
 80003e4:	20000008 	.word	0x20000008
 80003e8:	40010800 	.word	0x40010800
 80003ec:	2000000c 	.word	0x2000000c
 80003f0:	20000010 	.word	0x20000010

080003f4 <GetKeyInput2>:

void GetKeyInput2() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	KeyReg4 = KeyReg5;
 80003f8:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <GetKeyInput2+0x80>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <GetKeyInput2+0x84>)
 80003fe:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <GetKeyInput2+0x88>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <GetKeyInput2+0x80>)
 8000406:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 8000408:	2110      	movs	r1, #16
 800040a:	481d      	ldr	r0, [pc, #116]	; (8000480 <GetKeyInput2+0x8c>)
 800040c:	f001 f80e 	bl	800142c <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <GetKeyInput2+0x88>)
 8000416:	601a      	str	r2, [r3, #0]
	if ((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)) {
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <GetKeyInput2+0x84>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <GetKeyInput2+0x80>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	429a      	cmp	r2, r3
 8000422:	d125      	bne.n	8000470 <GetKeyInput2+0x7c>
 8000424:	4b13      	ldr	r3, [pc, #76]	; (8000474 <GetKeyInput2+0x80>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <GetKeyInput2+0x88>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	429a      	cmp	r2, r3
 800042e:	d11f      	bne.n	8000470 <GetKeyInput2+0x7c>
		if (KeyReg7 != KeyReg6) {
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <GetKeyInput2+0x90>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <GetKeyInput2+0x88>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	429a      	cmp	r2, r3
 800043a:	d00d      	beq.n	8000458 <GetKeyInput2+0x64>
			KeyReg7 = KeyReg6;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <GetKeyInput2+0x88>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a10      	ldr	r2, [pc, #64]	; (8000484 <GetKeyInput2+0x90>)
 8000442:	6013      	str	r3, [r2, #0]
			if (KeyReg6 == PRESSED_STATE) {
 8000444:	4b0d      	ldr	r3, [pc, #52]	; (800047c <GetKeyInput2+0x88>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d111      	bne.n	8000470 <GetKeyInput2+0x7c>
				SubKeyProcess2();
 800044c:	f7ff ff4a 	bl	80002e4 <SubKeyProcess2>
				TimerForKeyPress2 = 100;
 8000450:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <GetKeyInput2+0x94>)
 8000452:	2264      	movs	r2, #100	; 0x64
 8000454:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress2 == 0) {
				KeyReg7 = NORMAL_STATE;
			}
		}
	}
}
 8000456:	e00b      	b.n	8000470 <GetKeyInput2+0x7c>
			TimerForKeyPress2--;
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <GetKeyInput2+0x94>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <GetKeyInput2+0x94>)
 8000460:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 == 0) {
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <GetKeyInput2+0x94>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d102      	bne.n	8000470 <GetKeyInput2+0x7c>
				KeyReg7 = NORMAL_STATE;
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <GetKeyInput2+0x90>)
 800046c:	2201      	movs	r2, #1
 800046e:	601a      	str	r2, [r3, #0]
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000018 	.word	0x20000018
 8000478:	20000014 	.word	0x20000014
 800047c:	2000001c 	.word	0x2000001c
 8000480:	40010800 	.word	0x40010800
 8000484:	20000020 	.word	0x20000020
 8000488:	20000024 	.word	0x20000024

0800048c <GetKeyInput3>:

void GetKeyInput3() {
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	KeyReg8 = KeyReg9;
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <GetKeyInput3+0x80>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a1e      	ldr	r2, [pc, #120]	; (8000510 <GetKeyInput3+0x84>)
 8000496:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 8000498:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <GetKeyInput3+0x88>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <GetKeyInput3+0x80>)
 800049e:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80004a0:	2101      	movs	r1, #1
 80004a2:	481d      	ldr	r0, [pc, #116]	; (8000518 <GetKeyInput3+0x8c>)
 80004a4:	f000 ffc2 	bl	800142c <HAL_GPIO_ReadPin>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <GetKeyInput3+0x88>)
 80004ae:	601a      	str	r2, [r3, #0]
	if ((KeyReg8 == KeyReg9) && (KeyReg9 == KeyReg10)) {
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <GetKeyInput3+0x84>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <GetKeyInput3+0x80>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d125      	bne.n	8000508 <GetKeyInput3+0x7c>
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <GetKeyInput3+0x80>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <GetKeyInput3+0x88>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d11f      	bne.n	8000508 <GetKeyInput3+0x7c>
		if (KeyReg11 != KeyReg10) {
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <GetKeyInput3+0x90>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <GetKeyInput3+0x88>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d00d      	beq.n	80004f0 <GetKeyInput3+0x64>
			KeyReg11 = KeyReg10;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <GetKeyInput3+0x88>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a10      	ldr	r2, [pc, #64]	; (800051c <GetKeyInput3+0x90>)
 80004da:	6013      	str	r3, [r2, #0]
			if (KeyReg10 == PRESSED_STATE) {
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <GetKeyInput3+0x88>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d111      	bne.n	8000508 <GetKeyInput3+0x7c>
				SubKeyProcess3();
 80004e4:	f7ff ff0a 	bl	80002fc <SubKeyProcess3>
				TimerForKeyPress3 = 100;
 80004e8:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <GetKeyInput3+0x94>)
 80004ea:	2264      	movs	r2, #100	; 0x64
 80004ec:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress3 == 0) {
				KeyReg11 = NORMAL_STATE;
			}
		}
	}
}
 80004ee:	e00b      	b.n	8000508 <GetKeyInput3+0x7c>
			TimerForKeyPress3--;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <GetKeyInput3+0x94>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3b01      	subs	r3, #1
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <GetKeyInput3+0x94>)
 80004f8:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3 == 0) {
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <GetKeyInput3+0x94>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d102      	bne.n	8000508 <GetKeyInput3+0x7c>
				KeyReg11 = NORMAL_STATE;
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <GetKeyInput3+0x90>)
 8000504:	2201      	movs	r2, #1
 8000506:	601a      	str	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000028 	.word	0x20000028
 8000514:	20000030 	.word	0x20000030
 8000518:	40010800 	.word	0x40010800
 800051c:	20000034 	.word	0x20000034
 8000520:	20000038 	.word	0x20000038

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fc8c 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f81c 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f91e 	bl	8000770 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000534:	f000 f85a 	bl	80005ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000538:	f000 f8a4 	bl	8000684 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800053c:	2100      	movs	r1, #0
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <main+0x38>)
 8000540:	f001 fc86 	bl	8001e50 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <main+0x3c>)
 8000546:	f001 fbd9 	bl	8001cfc <HAL_TIM_Base_Start_IT>
//  htim3.Instance->CCR1 = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <main+0x40>)
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  auto_fsm_run();
 8000550:	f7ff fdfc 	bl	800014c <auto_fsm_run>
	  man_fsm_run();
 8000554:	f000 f99c 	bl	8000890 <man_fsm_run>
	  auto_fsm_run();
 8000558:	e7fa      	b.n	8000550 <main+0x2c>
 800055a:	bf00      	nop
 800055c:	200000a4 	.word	0x200000a4
 8000560:	200000ec 	.word	0x200000ec
 8000564:	20000070 	.word	0x20000070

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b090      	sub	sp, #64	; 0x40
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2228      	movs	r2, #40	; 0x28
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 faf2 	bl	8002b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2310      	movs	r3, #16
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800059a:	2300      	movs	r3, #0
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800059e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0318 	add.w	r3, r7, #24
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 ff6f 	bl	800148c <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005b4:	f000 f966 	bl	8000884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f9da 	bl	800198c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005de:	f000 f951 	bl	8000884 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3740      	adds	r7, #64	; 0x40
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_TIM2_Init+0x94>)
 800060a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800060e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_TIM2_Init+0x94>)
 8000612:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_TIM2_Init+0x94>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_TIM2_Init+0x94>)
 8000620:	2209      	movs	r2, #9
 8000622:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_TIM2_Init+0x94>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_TIM2_Init+0x94>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <MX_TIM2_Init+0x94>)
 8000632:	f001 fb13 	bl	8001c5c <HAL_TIM_Base_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800063c:	f000 f922 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_TIM2_Init+0x94>)
 800064e:	f001 fe67 	bl	8002320 <HAL_TIM_ConfigClockSource>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000658:	f000 f914 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_TIM2_Init+0x94>)
 800066a:	f002 f9e5 	bl	8002a38 <HAL_TIMEx_MasterConfigSynchronization>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000674:	f000 f906 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000ec 	.word	0x200000ec

08000684 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	; 0x38
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
 80006b0:	615a      	str	r2, [r3, #20]
 80006b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b4:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <MX_TIM3_Init+0xe4>)
 80006b6:	4a2d      	ldr	r2, [pc, #180]	; (800076c <MX_TIM3_Init+0xe8>)
 80006b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <MX_TIM3_Init+0xe4>)
 80006bc:	223f      	movs	r2, #63	; 0x3f
 80006be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <MX_TIM3_Init+0xe4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <MX_TIM3_Init+0xe4>)
 80006c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <MX_TIM3_Init+0xe4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <MX_TIM3_Init+0xe4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006da:	4823      	ldr	r0, [pc, #140]	; (8000768 <MX_TIM3_Init+0xe4>)
 80006dc:	f001 fabe 	bl	8001c5c <HAL_TIM_Base_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006e6:	f000 f8cd 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f4:	4619      	mov	r1, r3
 80006f6:	481c      	ldr	r0, [pc, #112]	; (8000768 <MX_TIM3_Init+0xe4>)
 80006f8:	f001 fe12 	bl	8002320 <HAL_TIM_ConfigClockSource>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000702:	f000 f8bf 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000706:	4818      	ldr	r0, [pc, #96]	; (8000768 <MX_TIM3_Init+0xe4>)
 8000708:	f001 fb4a 	bl	8001da0 <HAL_TIM_PWM_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000712:	f000 f8b7 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	4619      	mov	r1, r3
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <MX_TIM3_Init+0xe4>)
 8000726:	f002 f987 	bl	8002a38 <HAL_TIMEx_MasterConfigSynchronization>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000730:	f000 f8a8 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000734:	2360      	movs	r3, #96	; 0x60
 8000736:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <MX_TIM3_Init+0xe4>)
 800074c:	f001 fd2a 	bl	80021a4 <HAL_TIM_PWM_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000756:	f000 f895 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <MX_TIM3_Init+0xe4>)
 800075c:	f000 fa58 	bl	8000c10 <HAL_TIM_MspPostInit>

}
 8000760:	bf00      	nop
 8000762:	3738      	adds	r7, #56	; 0x38
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000a4 	.word	0x200000a4
 800076c:	40000400 	.word	0x40000400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b34      	ldr	r3, [pc, #208]	; (8000858 <MX_GPIO_Init+0xe8>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a33      	ldr	r2, [pc, #204]	; (8000858 <MX_GPIO_Init+0xe8>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b31      	ldr	r3, [pc, #196]	; (8000858 <MX_GPIO_Init+0xe8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <MX_GPIO_Init+0xe8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a2d      	ldr	r2, [pc, #180]	; (8000858 <MX_GPIO_Init+0xe8>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_GPIO_Init+0xe8>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_GPIO_Init+0xe8>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a27      	ldr	r2, [pc, #156]	; (8000858 <MX_GPIO_Init+0xe8>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <MX_GPIO_Init+0xe8>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0310 	and.w	r3, r3, #16
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D12_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 80007d2:	4822      	ldr	r0, [pc, #136]	; (800085c <MX_GPIO_Init+0xec>)
 80007d4:	f000 fe41 	bl	800145a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80007de:	4820      	ldr	r0, [pc, #128]	; (8000860 <MX_GPIO_Init+0xf0>)
 80007e0:	f000 fe3b 	bl	800145a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80007e4:	2313      	movs	r3, #19
 80007e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	4819      	ldr	r0, [pc, #100]	; (800085c <MX_GPIO_Init+0xec>)
 80007f8:	f000 fc94 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : D12_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D12_Pin|D7_Pin|D2_Pin;
 80007fc:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2302      	movs	r3, #2
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	4811      	ldr	r0, [pc, #68]	; (800085c <MX_GPIO_Init+0xec>)
 8000816:	f000 fc85 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0xf0>)
 800082e:	f000 fc79 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000832:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_GPIO_Init+0xf0>)
 800084c:	f000 fc6a 	bl	8001124 <HAL_GPIO_Init>

}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800
 8000860:	40010c00 	.word	0x40010c00

08000864 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	TimerRun();
 800086c:	f000 f8fa 	bl	8000a64 <TimerRun>
	GetKeyInput1();
 8000870:	f7ff fd74 	bl	800035c <GetKeyInput1>
	GetKeyInput2();
 8000874:	f7ff fdbe 	bl	80003f4 <GetKeyInput2>
	GetKeyInput3();
 8000878:	f7ff fe08 	bl	800048c <GetKeyInput3>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <man_fsm_run>:
 *  Created on: Dec 5, 2022
 *      Author: 84336
 */
#include "man_fsm.h"

void man_fsm_run() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	switch (status) {
 8000894:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <man_fsm_run+0x144>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b0c      	subs	r3, #12
 800089a:	2b03      	cmp	r3, #3
 800089c:	f200 8097 	bhi.w	80009ce <man_fsm_run+0x13e>
 80008a0:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <man_fsm_run+0x18>)
 80008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a6:	bf00      	nop
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	0800090d 	.word	0x0800090d
 80008b0:	08000949 	.word	0x08000949
 80008b4:	08000985 	.word	0x08000985

	case MAN_RED1_GREEN2:
		RED_1();
 80008b8:	f000 fa32 	bl	8000d20 <RED_1>
		GREEN_2();
 80008bc:	f000 fa8c 	bl	8000dd8 <GREEN_2>
		GREEN_3();
 80008c0:	f000 f8a0 	bl	8000a04 <GREEN_3>

		if (timer1_flag == 1) {
 80008c4:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <man_fsm_run+0x148>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d106      	bne.n	80008da <man_fsm_run+0x4a>
			status = RED1_YELLOW2;
 80008cc:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <man_fsm_run+0x144>)
 80008ce:	2203      	movs	r2, #3
 80008d0:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 80008d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008d6:	f000 f8a9 	bl	8000a2c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 80008da:	f7ff fd1b 	bl	8000314 <Button1_Is_Pressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d106      	bne.n	80008f2 <man_fsm_run+0x62>
			status = MAN_RED1_YELLOW2;
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <man_fsm_run+0x144>)
 80008e6:	220d      	movs	r2, #13
 80008e8:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 80008ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008ee:	f000 f89d 	bl	8000a2c <SetTimer1>
		}
////		if (Button2_Is_Pressed() == 1){
////			status = TUN_RED;
////			IncRed5s(5000);
////		}
		if (Button3_Is_Pressed() == 1)
 80008f2:	f7ff fd21 	bl	8000338 <Button3_Is_Pressed>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d161      	bne.n	80009c0 <man_fsm_run+0x130>
		{
			status = PED_GREEN;
 80008fc:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <man_fsm_run+0x144>)
 80008fe:	2222      	movs	r2, #34	; 0x22
 8000900:	601a      	str	r2, [r3, #0]
			SetTimer1(5000);
 8000902:	f241 3088 	movw	r0, #5000	; 0x1388
 8000906:	f000 f891 	bl	8000a2c <SetTimer1>
		}
		break;
 800090a:	e059      	b.n	80009c0 <man_fsm_run+0x130>

	case MAN_RED1_YELLOW2:
		YELLOW_2();
 800090c:	f000 fa54 	bl	8000db8 <YELLOW_2>
		RED_1();
 8000910:	f000 fa06 	bl	8000d20 <RED_1>
		GREEN_3();
 8000914:	f000 f876 	bl	8000a04 <GREEN_3>

		if (timer1_flag == 1) {
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <man_fsm_run+0x148>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d106      	bne.n	800092e <man_fsm_run+0x9e>
			status = GREEN1_RED2;
 8000920:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <man_fsm_run+0x144>)
 8000922:	2204      	movs	r2, #4
 8000924:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000926:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800092a:	f000 f87f 	bl	8000a2c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 800092e:	f7ff fcf1 	bl	8000314 <Button1_Is_Pressed>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d145      	bne.n	80009c4 <man_fsm_run+0x134>
			status = MAN_GREEN1_RED2;
 8000938:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <man_fsm_run+0x144>)
 800093a:	220e      	movs	r2, #14
 800093c:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 800093e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000942:	f000 f873 	bl	8000a2c <SetTimer1>
		}
//		if (Button2_Is_Pressed() == 1) {
//			status = TUN_YELLOW;
//			IncYellow2s(2000);
//		}
		break;
 8000946:	e03d      	b.n	80009c4 <man_fsm_run+0x134>

	case MAN_GREEN1_RED2:
		GREEN_1();
 8000948:	f000 fa12 	bl	8000d70 <GREEN_1>
		RED_2();
 800094c:	f000 fa24 	bl	8000d98 <RED_2>
		RED_3();
 8000950:	f000 f844 	bl	80009dc <RED_3>
		if (timer1_flag == 1) {
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <man_fsm_run+0x148>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d106      	bne.n	800096a <man_fsm_run+0xda>
			status = YELLOW1_RED2;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <man_fsm_run+0x144>)
 800095e:	2205      	movs	r2, #5
 8000960:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000962:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000966:	f000 f861 	bl	8000a2c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 800096a:	f7ff fcd3 	bl	8000314 <Button1_Is_Pressed>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d129      	bne.n	80009c8 <man_fsm_run+0x138>
			status = MAN_YELLOW1_RED2;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <man_fsm_run+0x144>)
 8000976:	220f      	movs	r2, #15
 8000978:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 800097a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800097e:	f000 f855 	bl	8000a2c <SetTimer1>
//		}
//		if (Button3_Is_Pressed() == 1) {
//			status = PED_RED;
//			SetTimer1(3000);
//		}
		break;
 8000982:	e021      	b.n	80009c8 <man_fsm_run+0x138>

	case MAN_YELLOW1_RED2:
		YELLOW_1();
 8000984:	f000 f9e0 	bl	8000d48 <YELLOW_1>
		RED_2();
 8000988:	f000 fa06 	bl	8000d98 <RED_2>
		RED_3();
 800098c:	f000 f826 	bl	80009dc <RED_3>
		if (timer1_flag == 1) {
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <man_fsm_run+0x148>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d106      	bne.n	80009a6 <man_fsm_run+0x116>
					status = RED1_GREEN2;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <man_fsm_run+0x144>)
 800099a:	2202      	movs	r2, #2
 800099c:	601a      	str	r2, [r3, #0]
					SetTimer1(3000);
 800099e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009a2:	f000 f843 	bl	8000a2c <SetTimer1>
				}
				if (Button1_Is_Pressed() == 1) {
 80009a6:	f7ff fcb5 	bl	8000314 <Button1_Is_Pressed>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10d      	bne.n	80009cc <man_fsm_run+0x13c>
					status = MAN_RED1_GREEN2;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <man_fsm_run+0x144>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	601a      	str	r2, [r3, #0]
					SetTimer1(2000);
 80009b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009ba:	f000 f837 	bl	8000a2c <SetTimer1>
				}
		break;
 80009be:	e005      	b.n	80009cc <man_fsm_run+0x13c>
		break;
 80009c0:	bf00      	nop
 80009c2:	e004      	b.n	80009ce <man_fsm_run+0x13e>
		break;
 80009c4:	bf00      	nop
 80009c6:	e002      	b.n	80009ce <man_fsm_run+0x13e>
		break;
 80009c8:	bf00      	nop
 80009ca:	e000      	b.n	80009ce <man_fsm_run+0x13e>
		break;
 80009cc:	bf00      	nop
	}
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000070 	.word	0x20000070
 80009d8:	20000074 	.word	0x20000074

080009dc <RED_3>:
 *      Author: Admin
 */

#include "pdtlight1.h"

void RED_3() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <RED_3+0x20>)
 80009e8:	f000 fd37 	bl	800145a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <RED_3+0x24>)
 80009f4:	f000 fd31 	bl	800145a <HAL_GPIO_WritePin>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40010800 	.word	0x40010800
 8000a00:	40010c00 	.word	0x40010c00

08000a04 <GREEN_3>:

void GREEN_3() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <GREEN_3+0x20>)
 8000a10:	f000 fd23 	bl	800145a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <GREEN_3+0x24>)
 8000a1c:	f000 fd1d 	bl	800145a <HAL_GPIO_WritePin>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40010800 	.word	0x40010800
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <SetTimer1>:
int timer_red_flag = 0, timer_red_counter = 0;
int timer_yellow_counter = 0, timer_yellow_flag = 0;
int timer_green_counter = 0, timer_green_flag = 0;
int timer_pedes_counter = 0, timer_pedes_flag = 0;

void SetTimer1 (int duration) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <SetTimer1+0x2c>)
 8000a38:	fb82 1203 	smull	r1, r2, r2, r3
 8000a3c:	1092      	asrs	r2, r2, #2
 8000a3e:	17db      	asrs	r3, r3, #31
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <SetTimer1+0x30>)
 8000a44:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <SetTimer1+0x34>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	66666667 	.word	0x66666667
 8000a5c:	20000078 	.word	0x20000078
 8000a60:	20000074 	.word	0x20000074

08000a64 <TimerRun>:
void SetTimer2 (int duration) {
	timer2_counter = duration / TICK;
	timer2_flag = 0;
}

void TimerRun () {
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <TimerRun+0x98>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	dd0b      	ble.n	8000a88 <TimerRun+0x24>
		timer1_counter--;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <TimerRun+0x98>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <TimerRun+0x98>)
 8000a78:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <TimerRun+0x98>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	dc02      	bgt.n	8000a88 <TimerRun+0x24>
			timer1_flag = 1;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <TimerRun+0x9c>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <TimerRun+0xa0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dd0b      	ble.n	8000aa8 <TimerRun+0x44>
			timer2_counter--;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <TimerRun+0xa0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <TimerRun+0xa0>)
 8000a98:	6013      	str	r3, [r2, #0]
			if (timer2_counter <= 0) {
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <TimerRun+0xa0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	dc02      	bgt.n	8000aa8 <TimerRun+0x44>
				timer2_flag = 1;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <TimerRun+0xa4>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
			}
		}
	if (timer_red_counter  <= 0) {
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <TimerRun+0xa8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dc02      	bgt.n	8000ab6 <TimerRun+0x52>
			timer_red_flag = 1;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <TimerRun+0xac>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
		}
	if (timer_yellow_counter <= 0) {
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <TimerRun+0xb0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	dc02      	bgt.n	8000ac4 <TimerRun+0x60>
			timer_yellow_flag = 1;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <TimerRun+0xb4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
		}
	if (timer_green_counter <= 0) {
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <TimerRun+0xb8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	dc02      	bgt.n	8000ad2 <TimerRun+0x6e>
			timer_green_flag = 1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <TimerRun+0xbc>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
		}
	if (timer_pedes_counter > 0) {
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <TimerRun+0xc0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	dd0b      	ble.n	8000af2 <TimerRun+0x8e>
		timer_pedes_counter--;
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <TimerRun+0xc0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <TimerRun+0xc0>)
 8000ae2:	6013      	str	r3, [r2, #0]
		if (timer_pedes_counter <= 0) {
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <TimerRun+0xc0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	dc02      	bgt.n	8000af2 <TimerRun+0x8e>
			timer_pedes_flag = 1;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <TimerRun+0xc4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000078 	.word	0x20000078
 8000b00:	20000074 	.word	0x20000074
 8000b04:	20000080 	.word	0x20000080
 8000b08:	2000007c 	.word	0x2000007c
 8000b0c:	20000088 	.word	0x20000088
 8000b10:	20000084 	.word	0x20000084
 8000b14:	2000008c 	.word	0x2000008c
 8000b18:	20000090 	.word	0x20000090
 8000b1c:	20000094 	.word	0x20000094
 8000b20:	20000098 	.word	0x20000098
 8000b24:	2000009c 	.word	0x2000009c
 8000b28:	200000a0 	.word	0x200000a0

08000b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x5c>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_MspInit+0x60>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_MspInit+0x60>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000

08000b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba0:	d114      	bne.n	8000bcc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_TIM_Base_MspInit+0x78>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <HAL_TIM_Base_MspInit+0x78>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_TIM_Base_MspInit+0x78>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	201c      	movs	r0, #28
 8000bc0:	f000 fa79 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc4:	201c      	movs	r0, #28
 8000bc6:	f000 fa92 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bca:	e018      	b.n	8000bfe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_TIM_Base_MspInit+0x7c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d113      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_TIM_Base_MspInit+0x78>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <HAL_TIM_Base_MspInit+0x78>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_TIM_Base_MspInit+0x78>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	201d      	movs	r0, #29
 8000bf4:	f000 fa5f 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bf8:	201d      	movs	r0, #29
 8000bfa:	f000 fa78 	bl	80010ee <HAL_NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40000400 	.word	0x40000400

08000c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <HAL_TIM_MspPostInit+0x7c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d129      	bne.n	8000c84 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_TIM_MspPostInit+0x80>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <HAL_TIM_MspPostInit+0x80>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_TIM_MspPostInit+0x80>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c48:	2340      	movs	r3, #64	; 0x40
 8000c4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <HAL_TIM_MspPostInit+0x84>)
 8000c5c:	f000 fa62 	bl	8001124 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_TIM_MspPostInit+0x88>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_TIM_MspPostInit+0x88>)
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40000400 	.word	0x40000400
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40010000 	.word	0x40010000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce2:	f000 f8f5 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <TIM2_IRQHandler+0x10>)
 8000cf2:	f001 f94f 	bl	8001f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000ec 	.word	0x200000ec

08000d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <TIM3_IRQHandler+0x10>)
 8000d06:	f001 f945 	bl	8001f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000a4 	.word	0x200000a4

08000d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <RED_1>:
 *  Created on: Nov 30, 2022
 *      Author: 84336
 */
#include "traffic1.h"

void RED_1() {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2108      	movs	r1, #8
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <RED_1+0x20>)
 8000d2a:	f000 fb96 	bl	800145a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <RED_1+0x24>)
 8000d36:	f000 fb90 	bl	800145a <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40010c00 	.word	0x40010c00
 8000d44:	40010800 	.word	0x40010800

08000d48 <YELLOW_1>:

void YELLOW_1() {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2108      	movs	r1, #8
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <YELLOW_1+0x20>)
 8000d52:	f000 fb82 	bl	800145a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <YELLOW_1+0x24>)
 8000d5e:	f000 fb7c 	bl	800145a <HAL_GPIO_WritePin>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	40010800 	.word	0x40010800

08000d70 <GREEN_1>:

void GREEN_1() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2108      	movs	r1, #8
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <GREEN_1+0x20>)
 8000d7a:	f000 fb6e 	bl	800145a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <GREEN_1+0x24>)
 8000d86:	f000 fb68 	bl	800145a <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40010c00 	.word	0x40010c00
 8000d94:	40010800 	.word	0x40010800

08000d98 <RED_2>:
 *  Created on: Nov 30, 2022
 *      Author: 84336
 */
#include "traffic2.h"

void RED_2() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2120      	movs	r1, #32
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <RED_2+0x1c>)
 8000da2:	f000 fb5a 	bl	800145a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2110      	movs	r1, #16
 8000daa:	4802      	ldr	r0, [pc, #8]	; (8000db4 <RED_2+0x1c>)
 8000dac:	f000 fb55 	bl	800145a <HAL_GPIO_WritePin>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <YELLOW_2>:

void YELLOW_2() {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2120      	movs	r1, #32
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <YELLOW_2+0x1c>)
 8000dc2:	f000 fb4a 	bl	800145a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2110      	movs	r1, #16
 8000dca:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <YELLOW_2+0x1c>)
 8000dcc:	f000 fb45 	bl	800145a <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <GREEN_2>:

void GREEN_2() {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2120      	movs	r1, #32
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <GREEN_2+0x1c>)
 8000de2:	f000 fb3a 	bl	800145a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2110      	movs	r1, #16
 8000dea:	4802      	ldr	r0, [pc, #8]	; (8000df4 <GREEN_2+0x1c>)
 8000dec:	f000 fb35 	bl	800145a <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40010c00 	.word	0x40010c00

08000df8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e1e:	f7ff ff79 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f001 fe79 	bl	8002b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e26:	f7ff fb7d 	bl	8000524 <main>
  bx lr
 8000e2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000e34:	08002bb0 	.word	0x08002bb0
  ldr r2, =_sbss
 8000e38:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000e3c:	20000138 	.word	0x20000138

08000e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_2_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_Init+0x28>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_Init+0x28>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f923 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fe64 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f93b 	bl	800110a <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f903 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000003c 	.word	0x2000003c
 8000ec8:	20000044 	.word	0x20000044
 8000ecc:	20000040 	.word	0x20000040

08000ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x1c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x20>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000044 	.word	0x20000044
 8000ef0:	20000134 	.word	0x20000134

08000ef4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b02      	ldr	r3, [pc, #8]	; (8000f04 <HAL_GetTick+0x10>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000134 	.word	0x20000134

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <__NVIC_EnableIRQ+0x34>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff90 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff2d 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff42 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff90 	bl	8000ff8 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5f 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff35 	bl	8000f6c <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b08b      	sub	sp, #44	; 0x2c
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e169      	b.n	800140c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001138:	2201      	movs	r2, #1
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8158 	bne.w	8001406 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a9a      	ldr	r2, [pc, #616]	; (80013c4 <HAL_GPIO_Init+0x2a0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d05e      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001160:	4a98      	ldr	r2, [pc, #608]	; (80013c4 <HAL_GPIO_Init+0x2a0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d875      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001166:	4a98      	ldr	r2, [pc, #608]	; (80013c8 <HAL_GPIO_Init+0x2a4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d058      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 800116c:	4a96      	ldr	r2, [pc, #600]	; (80013c8 <HAL_GPIO_Init+0x2a4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d86f      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001172:	4a96      	ldr	r2, [pc, #600]	; (80013cc <HAL_GPIO_Init+0x2a8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d052      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001178:	4a94      	ldr	r2, [pc, #592]	; (80013cc <HAL_GPIO_Init+0x2a8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d869      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800117e:	4a94      	ldr	r2, [pc, #592]	; (80013d0 <HAL_GPIO_Init+0x2ac>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d04c      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001184:	4a92      	ldr	r2, [pc, #584]	; (80013d0 <HAL_GPIO_Init+0x2ac>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d863      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800118a:	4a92      	ldr	r2, [pc, #584]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d046      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001190:	4a90      	ldr	r2, [pc, #576]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d85d      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001196:	2b12      	cmp	r3, #18
 8001198:	d82a      	bhi.n	80011f0 <HAL_GPIO_Init+0xcc>
 800119a:	2b12      	cmp	r3, #18
 800119c:	d859      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <HAL_GPIO_Init+0x80>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	0800121f 	.word	0x0800121f
 80011a8:	080011f9 	.word	0x080011f9
 80011ac:	0800120b 	.word	0x0800120b
 80011b0:	0800124d 	.word	0x0800124d
 80011b4:	08001253 	.word	0x08001253
 80011b8:	08001253 	.word	0x08001253
 80011bc:	08001253 	.word	0x08001253
 80011c0:	08001253 	.word	0x08001253
 80011c4:	08001253 	.word	0x08001253
 80011c8:	08001253 	.word	0x08001253
 80011cc:	08001253 	.word	0x08001253
 80011d0:	08001253 	.word	0x08001253
 80011d4:	08001253 	.word	0x08001253
 80011d8:	08001253 	.word	0x08001253
 80011dc:	08001253 	.word	0x08001253
 80011e0:	08001253 	.word	0x08001253
 80011e4:	08001253 	.word	0x08001253
 80011e8:	08001201 	.word	0x08001201
 80011ec:	08001215 	.word	0x08001215
 80011f0:	4a79      	ldr	r2, [pc, #484]	; (80013d8 <HAL_GPIO_Init+0x2b4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011f6:	e02c      	b.n	8001252 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e029      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	3304      	adds	r3, #4
 8001206:	623b      	str	r3, [r7, #32]
          break;
 8001208:	e024      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	3308      	adds	r3, #8
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e01f      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	330c      	adds	r3, #12
 800121a:	623b      	str	r3, [r7, #32]
          break;
 800121c:	e01a      	b.n	8001254 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001226:	2304      	movs	r3, #4
 8001228:	623b      	str	r3, [r7, #32]
          break;
 800122a:	e013      	b.n	8001254 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001234:	2308      	movs	r3, #8
 8001236:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	611a      	str	r2, [r3, #16]
          break;
 800123e:	e009      	b.n	8001254 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001240:	2308      	movs	r3, #8
 8001242:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	615a      	str	r2, [r3, #20]
          break;
 800124a:	e003      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x130>
          break;
 8001252:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2bff      	cmp	r3, #255	; 0xff
 8001258:	d801      	bhi.n	800125e <HAL_GPIO_Init+0x13a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	e001      	b.n	8001262 <HAL_GPIO_Init+0x13e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3304      	adds	r3, #4
 8001262:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2bff      	cmp	r3, #255	; 0xff
 8001268:	d802      	bhi.n	8001270 <HAL_GPIO_Init+0x14c>
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x152>
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	3b08      	subs	r3, #8
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	210f      	movs	r1, #15
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	6a39      	ldr	r1, [r7, #32]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	431a      	orrs	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80b1 	beq.w	8001406 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a4:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a4c      	ldr	r2, [pc, #304]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012bc:	4a48      	ldr	r2, [pc, #288]	; (80013e0 <HAL_GPIO_Init+0x2bc>)
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a40      	ldr	r2, [pc, #256]	; (80013e4 <HAL_GPIO_Init+0x2c0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x1ec>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a3f      	ldr	r2, [pc, #252]	; (80013e8 <HAL_GPIO_Init+0x2c4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1e8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <HAL_GPIO_Init+0x2c8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1e4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1e0>
 8001300:	2303      	movs	r3, #3
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001304:	2304      	movs	r3, #4
 8001306:	e004      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001308:	2302      	movs	r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001310:	2300      	movs	r3, #0
 8001312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	4093      	lsls	r3, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001322:	492f      	ldr	r1, [pc, #188]	; (80013e0 <HAL_GPIO_Init+0x2bc>)
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	492c      	ldr	r1, [pc, #176]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	4928      	ldr	r1, [pc, #160]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001354:	4013      	ands	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4922      	ldr	r1, [pc, #136]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	491e      	ldr	r1, [pc, #120]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	4918      	ldr	r1, [pc, #96]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	608b      	str	r3, [r1, #8]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4914      	ldr	r1, [pc, #80]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d021      	beq.n	80013f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	490e      	ldr	r1, [pc, #56]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	60cb      	str	r3, [r1, #12]
 80013c0:	e021      	b.n	8001406 <HAL_GPIO_Init+0x2e2>
 80013c2:	bf00      	nop
 80013c4:	10320000 	.word	0x10320000
 80013c8:	10310000 	.word	0x10310000
 80013cc:	10220000 	.word	0x10220000
 80013d0:	10210000 	.word	0x10210000
 80013d4:	10120000 	.word	0x10120000
 80013d8:	10110000 	.word	0x10110000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40011400 	.word	0x40011400
 80013f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_GPIO_Init+0x304>)
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	4909      	ldr	r1, [pc, #36]	; (8001428 <HAL_GPIO_Init+0x304>)
 8001402:	4013      	ands	r3, r2
 8001404:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	3301      	adds	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	fa22 f303 	lsr.w	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	f47f ae8e 	bne.w	8001138 <HAL_GPIO_Init+0x14>
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	372c      	adds	r7, #44	; 0x2c
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e001      	b.n	800144e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	807b      	strh	r3, [r7, #2]
 8001466:	4613      	mov	r3, r2
 8001468:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146a:	787b      	ldrb	r3, [r7, #1]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001470:	887a      	ldrh	r2, [r7, #2]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001476:	e003      	b.n	8001480 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	041a      	lsls	r2, r3, #16
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	611a      	str	r2, [r3, #16]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
	...

0800148c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e26c      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8087 	beq.w	80015ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ac:	4b92      	ldr	r3, [pc, #584]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d00c      	beq.n	80014d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014b8:	4b8f      	ldr	r3, [pc, #572]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d112      	bne.n	80014ea <HAL_RCC_OscConfig+0x5e>
 80014c4:	4b8c      	ldr	r3, [pc, #560]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d10b      	bne.n	80014ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d2:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d06c      	beq.n	80015b8 <HAL_RCC_OscConfig+0x12c>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d168      	bne.n	80015b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e246      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x76>
 80014f4:	4b80      	ldr	r3, [pc, #512]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a7f      	ldr	r2, [pc, #508]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e02e      	b.n	8001560 <HAL_RCC_OscConfig+0xd4>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x98>
 800150a:	4b7b      	ldr	r3, [pc, #492]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a7a      	ldr	r2, [pc, #488]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a77      	ldr	r2, [pc, #476]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 800151c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xd4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0xbc>
 800152e:	4b72      	ldr	r3, [pc, #456]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a71      	ldr	r2, [pc, #452]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b6f      	ldr	r3, [pc, #444]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6e      	ldr	r2, [pc, #440]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xd4>
 8001548:	4b6b      	ldr	r3, [pc, #428]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a6a      	ldr	r2, [pc, #424]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a67      	ldr	r2, [pc, #412]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fcc4 	bl	8000ef4 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fcc0 	bl	8000ef4 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1fa      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xe4>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fcb0 	bl	8000ef4 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fcac 	bl	8000ef4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1e6      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x10c>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d063      	beq.n	800168e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c6:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d11c      	bne.n	8001618 <HAL_RCC_OscConfig+0x18c>
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d116      	bne.n	8001618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x176>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e1ba      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4939      	ldr	r1, [pc, #228]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	e03a      	b.n	800168e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001620:	4b36      	ldr	r3, [pc, #216]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fc65 	bl	8000ef4 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fc61 	bl	8000ef4 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e19b      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4927      	ldr	r1, [pc, #156]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e015      	b.n	800168e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_RCC_OscConfig+0x270>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fc44 	bl	8000ef4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fc40 	bl	8000ef4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e17a      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d03a      	beq.n	8001710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d019      	beq.n	80016d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_RCC_OscConfig+0x274>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a8:	f7ff fc24 	bl	8000ef4 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b0:	f7ff fc20 	bl	8000ef4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e15a      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f000 faa6 	bl	8001c20 <RCC_Delay>
 80016d4:	e01c      	b.n	8001710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_RCC_OscConfig+0x274>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016dc:	f7ff fc0a 	bl	8000ef4 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e2:	e00f      	b.n	8001704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fc06 	bl	8000ef4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d908      	bls.n	8001704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e140      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	42420000 	.word	0x42420000
 8001700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	4b9e      	ldr	r3, [pc, #632]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e9      	bne.n	80016e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a6 	beq.w	800186a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b97      	ldr	r3, [pc, #604]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10d      	bne.n	800174a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b94      	ldr	r3, [pc, #592]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a93      	ldr	r2, [pc, #588]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b91      	ldr	r3, [pc, #580]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b8e      	ldr	r3, [pc, #568]	; (8001984 <HAL_RCC_OscConfig+0x4f8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001756:	4b8b      	ldr	r3, [pc, #556]	; (8001984 <HAL_RCC_OscConfig+0x4f8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a8a      	ldr	r2, [pc, #552]	; (8001984 <HAL_RCC_OscConfig+0x4f8>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001762:	f7ff fbc7 	bl	8000ef4 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176a:	f7ff fbc3 	bl	8000ef4 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b64      	cmp	r3, #100	; 0x64
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0fd      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	4b81      	ldr	r3, [pc, #516]	; (8001984 <HAL_RCC_OscConfig+0x4f8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x312>
 8001790:	4b7b      	ldr	r3, [pc, #492]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4a7a      	ldr	r2, [pc, #488]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6213      	str	r3, [r2, #32]
 800179c:	e02d      	b.n	80017fa <HAL_RCC_OscConfig+0x36e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x334>
 80017a6:	4b76      	ldr	r3, [pc, #472]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a75      	ldr	r2, [pc, #468]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6213      	str	r3, [r2, #32]
 80017b2:	4b73      	ldr	r3, [pc, #460]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a72      	ldr	r2, [pc, #456]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	6213      	str	r3, [r2, #32]
 80017be:	e01c      	b.n	80017fa <HAL_RCC_OscConfig+0x36e>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x356>
 80017c8:	4b6d      	ldr	r3, [pc, #436]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4a6c      	ldr	r2, [pc, #432]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6213      	str	r3, [r2, #32]
 80017d4:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a69      	ldr	r2, [pc, #420]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	e00b      	b.n	80017fa <HAL_RCC_OscConfig+0x36e>
 80017e2:	4b67      	ldr	r3, [pc, #412]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4a66      	ldr	r2, [pc, #408]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	4b64      	ldr	r3, [pc, #400]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a63      	ldr	r2, [pc, #396]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	f023 0304 	bic.w	r3, r3, #4
 80017f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d015      	beq.n	800182e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff fb77 	bl	8000ef4 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff fb73 	bl	8000ef4 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	; 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0ab      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	4b57      	ldr	r3, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ee      	beq.n	800180a <HAL_RCC_OscConfig+0x37e>
 800182c:	e014      	b.n	8001858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182e:	f7ff fb61 	bl	8000ef4 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001834:	e00a      	b.n	800184c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001836:	f7ff fb5d 	bl	8000ef4 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	f241 3288 	movw	r2, #5000	; 0x1388
 8001844:	4293      	cmp	r3, r2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e095      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184c:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1ee      	bne.n	8001836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d105      	bne.n	800186a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185e:	4b48      	ldr	r3, [pc, #288]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a47      	ldr	r2, [pc, #284]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8081 	beq.w	8001976 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001874:	4b42      	ldr	r3, [pc, #264]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d061      	beq.n	8001944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d146      	bne.n	8001916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001888:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <HAL_RCC_OscConfig+0x4fc>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fb31 	bl	8000ef4 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff fb2d 	bl	8000ef4 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e067      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f0      	bne.n	8001896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018bc:	d108      	bne.n	80018d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	492d      	ldr	r1, [pc, #180]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a19      	ldr	r1, [r3, #32]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	430b      	orrs	r3, r1
 80018e2:	4927      	ldr	r1, [pc, #156]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x4fc>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb01 	bl	8000ef4 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f6:	f7ff fafd 	bl	8000ef4 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e037      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x46a>
 8001914:	e02f      	b.n	8001976 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_RCC_OscConfig+0x4fc>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff faea 	bl	8000ef4 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff fae6 	bl	8000ef4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e020      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x498>
 8001942:	e018      	b.n	8001976 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e013      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	429a      	cmp	r2, r3
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	40007000 	.word	0x40007000
 8001988:	42420060 	.word	0x42420060

0800198c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0d0      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d910      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b67      	ldr	r3, [pc, #412]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 0207 	bic.w	r2, r3, #7
 80019b6:	4965      	ldr	r1, [pc, #404]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0b8      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a52      	ldr	r2, [pc, #328]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	494d      	ldr	r1, [pc, #308]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d040      	beq.n	8001aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d115      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e073      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e06b      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f023 0203 	bic.w	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4936      	ldr	r1, [pc, #216]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a7c:	f7ff fa3a 	bl	8000ef4 <HAL_GetTick>
 8001a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7ff fa36 	bl	8000ef4 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e053      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 020c 	and.w	r2, r3, #12
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1eb      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d210      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0207 	bic.w	r2, r3, #7
 8001ac2:	4922      	ldr	r1, [pc, #136]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e032      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4916      	ldr	r1, [pc, #88]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b1a:	f000 f821 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	5ccb      	ldrb	r3, [r1, r3]
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1cc>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1d0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f998 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	40021000 	.word	0x40021000
 8001b54:	08002b98 	.word	0x08002b98
 8001b58:	2000003c 	.word	0x2000003c
 8001b5c:	20000040 	.word	0x20000040

08001b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	b490      	push	{r4, r7}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b68:	1d3c      	adds	r4, r7, #4
 8001b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b70:	f240 2301 	movw	r3, #513	; 0x201
 8001b74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x46>
 8001b9e:	e02d      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba2:	623b      	str	r3, [r7, #32]
      break;
 8001ba4:	e02d      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	0c9b      	lsrs	r3, r3, #18
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c5b      	lsrs	r3, r3, #17
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bde:	fb02 f203 	mul.w	r2, r2, r3
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bea:	e004      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	623b      	str	r3, [r7, #32]
      break;
 8001bfa:	e002      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfe:	623b      	str	r3, [r7, #32]
      break;
 8001c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c02:	6a3b      	ldr	r3, [r7, #32]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc90      	pop	{r4, r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	08002b88 	.word	0x08002b88
 8001c14:	40021000 	.word	0x40021000
 8001c18:	007a1200 	.word	0x007a1200
 8001c1c:	003d0900 	.word	0x003d0900

08001c20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <RCC_Delay+0x34>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <RCC_Delay+0x38>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c3c:	bf00      	nop
  }
  while (Delay --);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	60fa      	str	r2, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <RCC_Delay+0x1c>
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	2000003c 	.word	0x2000003c
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e041      	b.n	8001cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe ff84 	bl	8000b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 fc28 	bl	80024f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d001      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e03a      	b.n	8001d8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_TIM_Base_Start_IT+0x98>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00e      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x58>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3e:	d009      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x58>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x58>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <HAL_TIM_Base_Start_IT+0xa0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d111      	bne.n	8001d78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d010      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	e007      	b.n	8001d88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800

08001da0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e041      	b.n	8001e36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f839 	bl	8001e3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f000 fb86 	bl	80024f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_TIM_PWM_Start+0x24>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	bf14      	ite	ne
 8001e6c:	2301      	movne	r3, #1
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e022      	b.n	8001eba <HAL_TIM_PWM_Start+0x6a>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d109      	bne.n	8001e8e <HAL_TIM_PWM_Start+0x3e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	bf14      	ite	ne
 8001e86:	2301      	movne	r3, #1
 8001e88:	2300      	moveq	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	e015      	b.n	8001eba <HAL_TIM_PWM_Start+0x6a>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d109      	bne.n	8001ea8 <HAL_TIM_PWM_Start+0x58>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e008      	b.n	8001eba <HAL_TIM_PWM_Start+0x6a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e05e      	b.n	8001f80 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_PWM_Start+0x82>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ed0:	e013      	b.n	8001efa <HAL_TIM_PWM_Start+0xaa>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_PWM_Start+0x92>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee0:	e00b      	b.n	8001efa <HAL_TIM_PWM_Start+0xaa>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d104      	bne.n	8001ef2 <HAL_TIM_PWM_Start+0xa2>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef0:	e003      	b.n	8001efa <HAL_TIM_PWM_Start+0xaa>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fd74 	bl	80029f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_TIM_PWM_Start+0x138>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d107      	bne.n	8001f22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <HAL_TIM_PWM_Start+0x138>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00e      	beq.n	8001f4a <HAL_TIM_PWM_Start+0xfa>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d009      	beq.n	8001f4a <HAL_TIM_PWM_Start+0xfa>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_TIM_PWM_Start+0x13c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d004      	beq.n	8001f4a <HAL_TIM_PWM_Start+0xfa>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_TIM_PWM_Start+0x140>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d111      	bne.n	8001f6e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b06      	cmp	r3, #6
 8001f5a:	d010      	beq.n	8001f7e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6c:	e007      	b.n	8001f7e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0201 	orr.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40012c00 	.word	0x40012c00
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800

08001f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d122      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0202 	mvn.w	r2, #2
 8001fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fa6f 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fa62 	bl	80024a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fa71 	bl	80024cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d122      	bne.n	8002044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d11b      	bne.n	8002044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0204 	mvn.w	r2, #4
 8002014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2202      	movs	r2, #2
 800201a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fa45 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa38 	bl	80024a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fa47 	bl	80024cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b08      	cmp	r3, #8
 8002050:	d122      	bne.n	8002098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b08      	cmp	r3, #8
 800205e:	d11b      	bne.n	8002098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0208 	mvn.w	r2, #8
 8002068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2204      	movs	r2, #4
 800206e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa1b 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa0e 	bl	80024a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fa1d 	bl	80024cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d122      	bne.n	80020ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b10      	cmp	r3, #16
 80020b2:	d11b      	bne.n	80020ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0210 	mvn.w	r2, #16
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2208      	movs	r2, #8
 80020c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f9f1 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f9e4 	bl	80024a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f9f3 	bl	80024cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10e      	bne.n	8002118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0201 	mvn.w	r2, #1
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fba6 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	2b80      	cmp	r3, #128	; 0x80
 8002124:	d10e      	bne.n	8002144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b80      	cmp	r3, #128	; 0x80
 8002132:	d107      	bne.n	8002144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fce1 	bl	8002b06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d10e      	bne.n	8002170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d107      	bne.n	8002170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f9b7 	bl	80024de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b20      	cmp	r3, #32
 800217c:	d10e      	bne.n	800219c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b20      	cmp	r3, #32
 800218a:	d107      	bne.n	800219c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0220 	mvn.w	r2, #32
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fcac 	bl	8002af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e0ac      	b.n	8002318 <HAL_TIM_PWM_ConfigChannel+0x174>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	f200 809f 	bhi.w	800230c <HAL_TIM_PWM_ConfigChannel+0x168>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	08002209 	.word	0x08002209
 80021d8:	0800230d 	.word	0x0800230d
 80021dc:	0800230d 	.word	0x0800230d
 80021e0:	0800230d 	.word	0x0800230d
 80021e4:	08002249 	.word	0x08002249
 80021e8:	0800230d 	.word	0x0800230d
 80021ec:	0800230d 	.word	0x0800230d
 80021f0:	0800230d 	.word	0x0800230d
 80021f4:	0800228b 	.word	0x0800228b
 80021f8:	0800230d 	.word	0x0800230d
 80021fc:	0800230d 	.word	0x0800230d
 8002200:	0800230d 	.word	0x0800230d
 8002204:	080022cb 	.word	0x080022cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f9d0 	bl	80025b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0208 	orr.w	r2, r2, #8
 8002222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6999      	ldr	r1, [r3, #24]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	619a      	str	r2, [r3, #24]
      break;
 8002246:	e062      	b.n	800230e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fa16 	bl	8002680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6999      	ldr	r1, [r3, #24]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	021a      	lsls	r2, r3, #8
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	619a      	str	r2, [r3, #24]
      break;
 8002288:	e041      	b.n	800230e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fa5f 	bl	8002754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0208 	orr.w	r2, r2, #8
 80022a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0204 	bic.w	r2, r2, #4
 80022b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69d9      	ldr	r1, [r3, #28]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	61da      	str	r2, [r3, #28]
      break;
 80022c8:	e021      	b.n	800230e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 faa9 	bl	8002828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69d9      	ldr	r1, [r3, #28]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	021a      	lsls	r2, r3, #8
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	61da      	str	r2, [r3, #28]
      break;
 800230a:	e000      	b.n	800230e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800230c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_TIM_ConfigClockSource+0x18>
 8002334:	2302      	movs	r3, #2
 8002336:	e0b3      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x180>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002356:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800235e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002370:	d03e      	beq.n	80023f0 <HAL_TIM_ConfigClockSource+0xd0>
 8002372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002376:	f200 8087 	bhi.w	8002488 <HAL_TIM_ConfigClockSource+0x168>
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	f000 8085 	beq.w	800248c <HAL_TIM_ConfigClockSource+0x16c>
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002386:	d87f      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x168>
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d01a      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0xa2>
 800238c:	2b70      	cmp	r3, #112	; 0x70
 800238e:	d87b      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x168>
 8002390:	2b60      	cmp	r3, #96	; 0x60
 8002392:	d050      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x116>
 8002394:	2b60      	cmp	r3, #96	; 0x60
 8002396:	d877      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x168>
 8002398:	2b50      	cmp	r3, #80	; 0x50
 800239a:	d03c      	beq.n	8002416 <HAL_TIM_ConfigClockSource+0xf6>
 800239c:	2b50      	cmp	r3, #80	; 0x50
 800239e:	d873      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x168>
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d058      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0x136>
 80023a4:	2b40      	cmp	r3, #64	; 0x40
 80023a6:	d86f      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x168>
 80023a8:	2b30      	cmp	r3, #48	; 0x30
 80023aa:	d064      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x156>
 80023ac:	2b30      	cmp	r3, #48	; 0x30
 80023ae:	d86b      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x168>
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d060      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x156>
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d867      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x168>
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d05c      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x156>
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d05a      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023c0:	e062      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f000 faee 	bl	80029b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	609a      	str	r2, [r3, #8]
      break;
 80023ee:	e04e      	b.n	800248e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f000 fad7 	bl	80029b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002412:	609a      	str	r2, [r3, #8]
      break;
 8002414:	e03b      	b.n	800248e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	461a      	mov	r2, r3
 8002424:	f000 fa4e 	bl	80028c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2150      	movs	r1, #80	; 0x50
 800242e:	4618      	mov	r0, r3
 8002430:	f000 faa5 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002434:	e02b      	b.n	800248e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	461a      	mov	r2, r3
 8002444:	f000 fa6c 	bl	8002920 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2160      	movs	r1, #96	; 0x60
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fa95 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002454:	e01b      	b.n	800248e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	461a      	mov	r2, r3
 8002464:	f000 fa2e 	bl	80028c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2140      	movs	r1, #64	; 0x40
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fa85 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002474:	e00b      	b.n	800248e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f000 fa7c 	bl	800297e <TIM_ITRx_SetConfig>
        break;
 8002486:	e002      	b.n	800248e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002488:	bf00      	nop
 800248a:	e000      	b.n	800248e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800248c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a29      	ldr	r2, [pc, #164]	; (80025a8 <TIM_Base_SetConfig+0xb8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00b      	beq.n	8002520 <TIM_Base_SetConfig+0x30>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250e:	d007      	beq.n	8002520 <TIM_Base_SetConfig+0x30>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a26      	ldr	r2, [pc, #152]	; (80025ac <TIM_Base_SetConfig+0xbc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d003      	beq.n	8002520 <TIM_Base_SetConfig+0x30>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <TIM_Base_SetConfig+0xc0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d108      	bne.n	8002532 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <TIM_Base_SetConfig+0xb8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <TIM_Base_SetConfig+0xbc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <TIM_Base_SetConfig+0xc0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <TIM_Base_SetConfig+0xb8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	615a      	str	r2, [r3, #20]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40000800 	.word	0x40000800

080025b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f023 0201 	bic.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <TIM_OC1_SetConfig+0xc8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10c      	bne.n	800262a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0308 	bic.w	r3, r3, #8
 8002616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a13      	ldr	r2, [pc, #76]	; (800267c <TIM_OC1_SetConfig+0xc8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d111      	bne.n	8002656 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	621a      	str	r2, [r3, #32]
}
 8002670:	bf00      	nop
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40012c00 	.word	0x40012c00

08002680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	f023 0210 	bic.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f023 0320 	bic.w	r3, r3, #32
 80026ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <TIM_OC2_SetConfig+0xd0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10d      	bne.n	80026fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <TIM_OC2_SetConfig+0xd0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d113      	bne.n	800272c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800270a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40012c00 	.word	0x40012c00

08002754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800279c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <TIM_OC3_SetConfig+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10d      	bne.n	80027ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <TIM_OC3_SetConfig+0xd0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d113      	bne.n	80027fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	621a      	str	r2, [r3, #32]
}
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40012c00 	.word	0x40012c00

08002828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	031b      	lsls	r3, r3, #12
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <TIM_OC4_SetConfig+0x98>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d109      	bne.n	800289c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800288e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00

080028c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0201 	bic.w	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f023 030a 	bic.w	r3, r3, #10
 8002900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	621a      	str	r2, [r3, #32]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 0210 	bic.w	r2, r3, #16
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800294a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	031b      	lsls	r3, r3, #12
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800295c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	f043 0307 	orr.w	r3, r3, #7
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b087      	sub	sp, #28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	021a      	lsls	r2, r3, #8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	609a      	str	r2, [r3, #8]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2201      	movs	r2, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1a      	ldr	r2, [r3, #32]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e046      	b.n	8002ade <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00e      	beq.n	8002ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d009      	beq.n	8002ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d004      	beq.n	8002ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10c      	bne.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40000800 	.word	0x40000800

08002af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <__libc_init_array>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	2600      	movs	r6, #0
 8002b1c:	4d0c      	ldr	r5, [pc, #48]	; (8002b50 <__libc_init_array+0x38>)
 8002b1e:	4c0d      	ldr	r4, [pc, #52]	; (8002b54 <__libc_init_array+0x3c>)
 8002b20:	1b64      	subs	r4, r4, r5
 8002b22:	10a4      	asrs	r4, r4, #2
 8002b24:	42a6      	cmp	r6, r4
 8002b26:	d109      	bne.n	8002b3c <__libc_init_array+0x24>
 8002b28:	f000 f822 	bl	8002b70 <_init>
 8002b2c:	2600      	movs	r6, #0
 8002b2e:	4d0a      	ldr	r5, [pc, #40]	; (8002b58 <__libc_init_array+0x40>)
 8002b30:	4c0a      	ldr	r4, [pc, #40]	; (8002b5c <__libc_init_array+0x44>)
 8002b32:	1b64      	subs	r4, r4, r5
 8002b34:	10a4      	asrs	r4, r4, #2
 8002b36:	42a6      	cmp	r6, r4
 8002b38:	d105      	bne.n	8002b46 <__libc_init_array+0x2e>
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b40:	4798      	blx	r3
 8002b42:	3601      	adds	r6, #1
 8002b44:	e7ee      	b.n	8002b24 <__libc_init_array+0xc>
 8002b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4a:	4798      	blx	r3
 8002b4c:	3601      	adds	r6, #1
 8002b4e:	e7f2      	b.n	8002b36 <__libc_init_array+0x1e>
 8002b50:	08002ba8 	.word	0x08002ba8
 8002b54:	08002ba8 	.word	0x08002ba8
 8002b58:	08002ba8 	.word	0x08002ba8
 8002b5c:	08002bac 	.word	0x08002bac

08002b60 <memset>:
 8002b60:	4603      	mov	r3, r0
 8002b62:	4402      	add	r2, r0
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d100      	bne.n	8002b6a <memset+0xa>
 8002b68:	4770      	bx	lr
 8002b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6e:	e7f9      	b.n	8002b64 <memset+0x4>

08002b70 <_init>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	bf00      	nop
 8002b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b76:	bc08      	pop	{r3}
 8002b78:	469e      	mov	lr, r3
 8002b7a:	4770      	bx	lr

08002b7c <_fini>:
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	bf00      	nop
 8002b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b82:	bc08      	pop	{r3}
 8002b84:	469e      	mov	lr, r3
 8002b86:	4770      	bx	lr
